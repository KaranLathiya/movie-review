package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"log"
	"movie-review/api/middleware"
	"movie-review/api/model/request"
	"movie-review/api/repository"
	"movie-review/constant"
	error_handling "movie-review/error"
	"movie-review/graph/model"
	"movie-review/utils"
)

// CreateMovieReview is the resolver for the CreateMovieReview field.
func (r *mutationResolver) CreateMovieReview(ctx context.Context, input request.NewMovieReview) (string, error) {
	err := utils.ValidateStruct(input, nil)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	userID, _ := ctx.Value(middleware.UserCtxKey).(string)
	isReviewLimitExceeded, err := repo.IsReviewLimitExceeded(userID)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	if isReviewLimitExceeded{
		return constant.EMPTY_STRING, error_handling.ReviewLimitExceeded
	}
	if err != nil{
		return constant.EMPTY_STRING, err
	}
	reviewID, err := repo.CreateMovieReview(userID, input)
	if err != nil {
		if err == error_handling.ForeignKeyConstraintError {
			return constant.EMPTY_STRING, error_handling.MovieDoesNotExist
		} else if err == error_handling.UniqueKeyConstraintError {
			return constant.EMPTY_STRING, error_handling.MovieReviewAlreadyExist
		}
		return constant.EMPTY_STRING, err
	}
	go func() {
		movie, err := repo.FetchMovieByID(input.MovieID)
		if err != nil {
			log.Println(err)
			return
		}
		movieReviewNotification := &model.MovieReviewNotification{
			ID:              input.MovieID,
			Title:           movie.Title,
			Description:     movie.Description,
			DirectorID:      movie.DirectorID,
			CreatedAt:       movie.CreatedAt,
			UpdatedAt:       movie.UpdatedAt,
			UpdatedByUserID: movie.UpdatedByUserID,
			AverageRating:   movie.AverageRating,
			Director:        movie.Director,
			UpdatedBy:       movie.UpdatedBy,
			Review: &model.MovieReview{
				ID:         &reviewID,
				MovieID:    &input.MovieID,
				Comment:    &input.Comment,
				Rating:     &input.Rating,
				ReviewerID: &userID,
			},
		}
		MovieReviewNotificationChannel <- movieReviewNotification
	}()
	return reviewID, nil
}

// DeleteMovieReview is the resolver for the DeleteMovieReview field.
func (r *mutationResolver) DeleteMovieReview(ctx context.Context, reviewID string) (string, error) {
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	userID, _ := ctx.Value(middleware.UserCtxKey).(string)
	err := repo.DeleteMovieReview(userID, reviewID)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	return constant.MOVIE_REVIEW_DELETED, nil
}

// UpdateMovieReview is the resolver for the UpdateMovieReview field.
func (r *mutationResolver) UpdateMovieReview(ctx context.Context, input request.UpdateMovieReview) (string, error) {
	err := utils.ValidateStruct(input, nil)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	userID, _ := ctx.Value(middleware.UserCtxKey).(string)
	err = repo.UpdateMovieReview(userID, input)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	return constant.MOVIE_REVIEW_UPDATED, nil
}

// MovieReviewNotification is the resolver for the movieReviewNotification field.
func (r *subscriptionResolver) MovieReviewNotification(ctx context.Context) (<-chan *model.MovieReviewNotification, error) {
	return MovieReviewNotificationChannel, nil
}

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var MovieReviewNotificationChannel = make(chan *model.MovieReviewNotification)
