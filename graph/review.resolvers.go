package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"movie-review/api/middleware"
	"movie-review/api/model/request"
	"movie-review/api/repository"
	"movie-review/constant"
	error_handling "movie-review/error"
	"movie-review/utils"
)

// CreateMovieReview is the resolver for the CreateMovieReview field.
func (r *mutationResolver) CreateMovieReview(ctx context.Context, input request.NewMovieReview) (string, error) {
	err := utils.ValidateStruct(input, nil)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	userID, _ := ctx.Value(middleware.UserCtxKey).(string)
	reviewID, err := repo.CreateMovieReview(userID, input)
	if err != nil {
		if err == error_handling.ForeignKeyConstraintError {
			return constant.EMPTY_STRING, error_handling.MovieDoesNotExist
		}
		return constant.EMPTY_STRING, err
	}
	return reviewID, nil
}

// DeleteMovieReview is the resolver for the DeleteMovieReview field.
func (r *mutationResolver) DeleteMovieReview(ctx context.Context, reviewID string) (string, error) {
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	userID, _ := ctx.Value(middleware.UserCtxKey).(string)
	err := repo.DeleteMovieReview(userID, reviewID)
	if err != nil {
		if err == error_handling.NoRowsAffectedError {
			return constant.EMPTY_STRING, error_handling.MovieReviewDoesNotExist
		}
		return constant.EMPTY_STRING, err
	}
	return constant.MOVIE_REVIEW_DELETED, nil
}

// UpdateMovieReview is the resolver for the UpdateMovieReview field.
func (r *mutationResolver) UpdateMovieReview(ctx context.Context, input request.UpdateMovieReview) (string, error) {
	err := utils.ValidateStruct(input, nil)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	userID, _ := ctx.Value(middleware.UserCtxKey).(string)
	err = repo.UpdateMovieReview(userID, input)
	if err != nil {
		if err == error_handling.NoRowsAffectedError {
			return constant.EMPTY_STRING, error_handling.MovieReviewDoesNotExist
		} 
		return constant.EMPTY_STRING, err
	}
	return constant.MOVIE_REVIEW_UPDATED, nil
}
