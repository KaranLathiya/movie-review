package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"log"
	"movie-review/api/model/request"
	"movie-review/api/repository"
	"movie-review/constant"
	error_handling "movie-review/error"
	"movie-review/graph/model"
	"movie-review/utils"

	"github.com/markbates/going/randx"
)

// CreateMovieReview is the resolver for the CreateMovieReview field.
func (r *mutationResolver) CreateMovieReview(ctx context.Context, input request.NewMovieReview) (string, error) {
	err := utils.ValidateStruct(input, nil)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	repo := ctx.Value(constant.RepoCtxKey).(*repository.Repositories)
	userID := ctx.Value(constant.UserIDCtxKey).(string)

	//for creating new movie review first check the limit of reviews not exceeded by the user
	isReviewLimitExceeded, err := repo.IsReviewLimitExceeded(userID)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	if isReviewLimitExceeded {
		return constant.EMPTY_STRING, error_handling.ReviewLimitExceeded
	}
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	reviewID, err := repo.CreateMovieReview(userID, input)
	if err != nil {
		if err == error_handling.ForeignKeyConstraintError {
			return constant.EMPTY_STRING, error_handling.MovieDoesNotExist
		}
		if err == error_handling.UniqueKeyConstraintError {
			return constant.EMPTY_STRING, error_handling.MovieReviewAlreadyExist
		}
		return constant.EMPTY_STRING, err
	}
	//update realtime at new movie reviews add
	go func() {
		movieReviewNotification(repo, input, reviewID, userID)
	}()
	return reviewID, nil
}

// DeleteMovieReview is the resolver for the DeleteMovieReview field.
func (r *mutationResolver) DeleteMovieReview(ctx context.Context, reviewID string) (string, error) {
	repo := ctx.Value(constant.RepoCtxKey).(*repository.Repositories)
	userID := ctx.Value(constant.UserIDCtxKey).(string)
	err := repo.DeleteMovieReview(userID, reviewID)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	return constant.MOVIE_REVIEW_DELETED, nil
}

// UpdateMovieReview is the resolver for the UpdateMovieReview field.
func (r *mutationResolver) UpdateMovieReview(ctx context.Context, input request.UpdateMovieReview) (string, error) {
	err := utils.ValidateStruct(input, nil)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	repo := ctx.Value(constant.RepoCtxKey).(*repository.Repositories)
	userID := ctx.Value(constant.UserIDCtxKey).(string)
	err = repo.UpdateMovieReview(userID, input)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	return constant.MOVIE_REVIEW_UPDATED, nil
}

// SearchMovieReviews is the resolver for the SearchMovieReviews field.
func (r *queryResolver) SearchMovieReviews(ctx context.Context, filter *model.MovieReviewSearchFilter, sortBy model.MovieReviewSearchSort, limit int, offset int) ([]*model.MovieReview, error) {
	repo := ctx.Value(constant.RepoCtxKey).(*repository.Repositories)
	movieReview, err := repo.SearchMovieReviews(filter, sortBy, limit, offset)
	if err != nil {
		return nil, err
	}
	return movieReview, nil
}

// FetchMovieReviewsByMovieID is the resolver for the FetchMovieReviewsByMovieID field.
func (r *queryResolver) FetchMovieReviewsByMovieID(ctx context.Context, movieID string, limit int, offset int) ([]*model.MovieReview, error) {
	repo := ctx.Value(constant.RepoCtxKey).(*repository.Repositories)
	movieReview, err := repo.FetchMovieReviewsByMovieID(movieID, limit, offset)
	if err != nil {
		return nil, err
	}
	return movieReview, nil
}

// MovieReviewNotification is the resolver for the movieReviewNotification field.
func (r *subscriptionResolver) MovieReviewNotification(ctx context.Context, movieID string) (<-chan *model.MovieReviewNotification, error) {
	//to generate random string
	randomString := randx.String(8)
	//movieReviewNotificationEvent is channel that, this subscription reading value from
	movieReviewNotificationEvent := make(chan *model.MovieReviewNotification, 1)
	//movieReviewNotificationChannelMap to store channel with particular movieID 
	// it is always creates new map with similar movieID 
	movieReviewNotificationChannelMap := map[string]chan *model.MovieReviewNotification{}
	movieReviewNotificationChannelMap[movieID] = movieReviewNotificationEvent
	//store movieReviewNotificationChannelMap as value in movieReviewNotificationMap using key randomString
	movieReviewNotificationMap[randomString] = movieReviewNotificationChannelMap
	go func() {
		//to check that particular subsription is canceled or not 
		<-ctx.Done()
		//once subscription canceled then below code of lines execute (for memory clean)
		//close the channel from that this subscription reading values
		close(movieReviewNotificationEvent)
		//delete the map value of key random string
		delete(movieReviewNotificationMap, randomString)
	}()
	return movieReviewNotificationEvent, nil
}

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.

var movieReviewNotificationMap map[string]map[string]chan *model.MovieReviewNotification

func init() {
	movieReviewNotificationMap = map[string]map[string]chan *model.MovieReviewNotification{}
}

func movieReviewNotification(repo *repository.Repositories, input request.NewMovieReview, reviewID string, userID string) {
	movie, err := repo.FetchMovieByID(input.MovieID)
	if err != nil {
		log.Println(err)
		return
	}
	movieReviewNotification := movieReviewNotificationModelCreate(input, movie, reviewID, userID)
	//iterate over all random strings to get movieReviewNotificationChannelMap
	for _, movieReviewNotificationChannelMap := range movieReviewNotificationMap {
		//in movieReviewNotificationChannelMap pass movieID as key so if value available then it gives the channel in that we can send details of new movie revies  
		observer, ok := movieReviewNotificationChannelMap[input.MovieID]
		if ok {
			//write value in that channel so can read it by subscription 
			observer <- movieReviewNotification
		}
	}
}
func movieReviewNotificationModelCreate(input request.NewMovieReview, movie *model.Movie, reviewID string, userID string) *model.MovieReviewNotification {
	movieReviewNotification := &model.MovieReviewNotification{
		ID:              input.MovieID,
		Title:           movie.Title,
		Description:     movie.Description,
		DirectorID:      movie.DirectorID,
		CreatedAt:       movie.CreatedAt,
		UpdatedAt:       movie.UpdatedAt,
		UpdatedByUserID: movie.UpdatedByUserID,
		AverageRating:   movie.AverageRating,
		Director:        movie.Director,
		Updater:         movie.UpdatedBy,
		Review: &model.MovieReview{
			ID:         &reviewID,
			MovieID:    &input.MovieID,
			Comment:    &input.Comment,
			Rating:     &input.Rating,
			ReviewerID: &userID,
		},
	}
	return movieReviewNotification
}
