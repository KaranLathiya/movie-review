package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"
	"movie-review/api/middleware"
	"movie-review/api/model/request"
	"movie-review/api/repository"
	"movie-review/constant"
	error_handling "movie-review/error"
	"movie-review/graph/model"
	"movie-review/utils"
)

// Reviews is the resolver for the reviews field.
func (r *movieResolver) Reviews(ctx context.Context, obj *model.Movie, limit *int, offset *int) ([]*model.Review, error) {
	panic(fmt.Errorf("not implemented: Reviews - reviews"))
}

// CreateMovie is the resolver for the CreateMovie field.
func (r *mutationResolver) CreateMovie(ctx context.Context, input request.NewMovie) (string, error) {
	err := utils.ValidateStruct(input, nil)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	userID, _ := ctx.Value(middleware.UserCtxKey).(string)
	movieID, err := repo.CreateMovie(userID, input)
	if err != nil {
		if err == error_handling.ForeignKeyConstraintError {
			return constant.EMPTY_STRING, error_handling.UserDoesNotExist
		} else if err == error_handling.UniqueKeyConstraintError {
			return constant.EMPTY_STRING, error_handling.MovieTitleAlreadyExist
		}
		return constant.EMPTY_STRING, err
	}
	return movieID, nil
}

// UpdateMovie is the resolver for the UpdateMovie field.
func (r *mutationResolver) UpdateMovie(ctx context.Context, input request.UpdateMovie) (string, error) {
	err := utils.ValidateStruct(input, nil)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	userID, _ := ctx.Value(middleware.UserCtxKey).(string)
	err = repo.UpdateMovie(userID, input)
	if err != nil {
		if err == error_handling.ForeignKeyConstraintError {
			return constant.EMPTY_STRING, error_handling.UserDoesNotExist
		} else if err == error_handling.UniqueKeyConstraintError {
			return constant.EMPTY_STRING, error_handling.MovieTitleAlreadyExist
		}
		return constant.EMPTY_STRING, err
	}
	return constant.MOVIE_UPDATED, nil
}

// DeleteMovie is the resolver for the DeleteMovie field.
func (r *mutationResolver) DeleteMovie(ctx context.Context, movieID string) (string, error) {
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	err := repo.DeleteMovie(movieID)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	return constant.MOVIE_DELETED, nil
}

// FetchMovies is the resolver for the FetchMovies field.
func (r *queryResolver) FetchMovies(ctx context.Context, movieName *string, limit *int, offset *int) ([]*model.Movie, error) {
	panic(fmt.Errorf("not implemented: FetchMovies - FetchMovies"))
}

// Movie returns MovieResolver implementation.
func (r *Resolver) Movie() MovieResolver { return &movieResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type movieResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *queryResolver) MovieList(ctx context.Context, movieName *string, limit *int, offset *int) ([]*model.Movie, error) {
	panic(fmt.Errorf("not implemented: MovieList - MovieList"))
}
