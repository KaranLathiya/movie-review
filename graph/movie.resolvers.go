package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"movie-review/api/middleware"
	"movie-review/api/model/request"
	"movie-review/api/repository"
	"movie-review/constant"
	error_handling "movie-review/error"
	"movie-review/utils"
)

// CreateMovie is the resolver for the CreateMovie field.
func (r *mutationResolver) CreateMovie(ctx context.Context, input request.NewMovie) (string, error) {
	err := utils.ValidateStruct(input, nil)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	userID, _ := ctx.Value(middleware.UserCtxKey).(string)
	movieID, err := repo.CreateMovie(userID, input)
	if err != nil {
		if err == error_handling.ForeignKeyConstraintError {
			return constant.EMPTY_STRING, error_handling.UserDoesNotExist
		}
		return constant.EMPTY_STRING, err
	}
	return movieID, nil
}

// UpdateMovie is the resolver for the UpdateMovie field.
func (r *mutationResolver) UpdateMovie(ctx context.Context, input request.UpdateMovie) (string, error) {
	err := utils.ValidateStruct(input, nil)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	userID, _ := ctx.Value(middleware.UserCtxKey).(string)
	err = repo.UpdateMovie(userID, input)
	if err != nil {
		if err == error_handling.NoRowsAffectedError {
			return constant.EMPTY_STRING, error_handling.MovieDoesNotExist
		} else if err == error_handling.ForeignKeyConstraintError {
			return constant.EMPTY_STRING, error_handling.UserDoesNotExist
		}
		return constant.EMPTY_STRING, err
	}
	return constant.MOVIE_UPDATED, nil
}

// DeleteMovie is the resolver for the DeleteMovie field.
func (r *mutationResolver) DeleteMovie(ctx context.Context, movieID string) (string, error) {
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	err := repo.DeleteMovie(movieID)
	if err != nil {
		if err == error_handling.NoRowsAffectedError {
			return constant.EMPTY_STRING, error_handling.MovieDoesNotExist
		}
		return constant.EMPTY_STRING, err
	}
	return constant.MOVIE_DELETED, nil
}
