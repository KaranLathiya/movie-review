package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"movie-review/api/middleware"
	"movie-review/api/model/request"
	"movie-review/api/repository"
	"movie-review/constant"
	error_handling "movie-review/error"
	"movie-review/graph/dataloader"
	"movie-review/graph/model"
	"movie-review/utils"
)

// Reviews is the resolver for the reviews field.
func (r *movieResolver) Reviews(ctx context.Context, obj *model.Movie, limit int, offset int) ([]*model.MovieReview, error) {
	reviews, err := ctx.Value(dataloader.LoaderCtxKey).(*dataloader.Loaders).ReviewLoader.Load(obj.ID, limit, offset)
	return reviews, err
	// repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	// movieReviews, err := repo.FetchMovieReviews(obj.ID, *limit, *offset)
	// if err != nil {
	// 	return nil, err
	// }
	// return movieReviews, nil
}

// CreateMovie is the resolver for the CreateMovie field.
func (r *mutationResolver) CreateMovie(ctx context.Context, input request.NewMovie) (string, error) {
	err := utils.ValidateStruct(input, nil)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	userID, _ := ctx.Value(middleware.UserCtxKey).(string)
	movieID, err := repo.CreateMovie(userID, input)
	if err != nil {
		if err == error_handling.ForeignKeyConstraintError {
			return constant.EMPTY_STRING, error_handling.UserDoesNotExist
		} else if err == error_handling.UniqueKeyConstraintError {
			return constant.EMPTY_STRING, error_handling.MovieTitleAlreadyExist
		}
		return constant.EMPTY_STRING, err
	}
	return movieID, nil
}

// UpdateMovie is the resolver for the UpdateMovie field.
func (r *mutationResolver) UpdateMovie(ctx context.Context, input request.UpdateMovie) (string, error) {
	err := utils.ValidateStruct(input, nil)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	userID, _ := ctx.Value(middleware.UserCtxKey).(string)
	err = repo.UpdateMovie(userID, input)
	if err != nil {
		if err == error_handling.ForeignKeyConstraintError {
			return constant.EMPTY_STRING, error_handling.UserDoesNotExist
		} else if err == error_handling.UniqueKeyConstraintError {
			return constant.EMPTY_STRING, error_handling.MovieTitleAlreadyExist
		}
		return constant.EMPTY_STRING, err
	}
	return constant.MOVIE_UPDATED, nil
}

// DeleteMovie is the resolver for the DeleteMovie field.
func (r *mutationResolver) DeleteMovie(ctx context.Context, movieID string) (string, error) {
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	err := repo.DeleteMovie(movieID)
	if err != nil {
		return constant.EMPTY_STRING, err
	}
	return constant.MOVIE_DELETED, nil
}

// FetchMovies is the resolver for the FetchMovies field.
func (r *queryResolver) FetchMovies(ctx context.Context, movieName string, limit int, offset int) ([]*model.Movie, error) {
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	movies, err := repo.FetchMovies(movieName, limit, offset)
	if err != nil {
		return nil, err
	}
	return movies, nil
}

// FetchMovieByID is the resolver for the FetchMovieByID field.
func (r *queryResolver) FetchMovieByID(ctx context.Context, movieID string) (*model.Movie, error) {
	repo, _ := ctx.Value(middleware.RepoCtxKey).(*repository.Repositories)
	movie, err := repo.FetchMovieByID(movieID)
	if err != nil {
		return nil, err
	}
	return movie, nil
}

// Movie returns MovieResolver implementation.
func (r *Resolver) Movie() MovieResolver { return &movieResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type movieResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
