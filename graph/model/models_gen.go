// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Movie struct {
	ID              string         `json:"id"`
	Title           *string        `json:"title,omitempty"`
	Description     *string        `json:"description,omitempty"`
	DirectorID      *string        `json:"directorID,omitempty"`
	CreatedAt       *string        `json:"createdAt,omitempty"`
	UpdatedAt       *string        `json:"updatedAt,omitempty"`
	UpdatedByUserID *string        `json:"updatedByUserID,omitempty"`
	Reviews         []*MovieReview `json:"reviews,omitempty"`
	AverageRating   *float64       `json:"averageRating,omitempty"`
	Director        *string        `json:"director,omitempty"`
	UpdatedBy       *string        `json:"updatedBy,omitempty"`
}

type MovieReview struct {
	MovieID    *string `json:"movieID,omitempty"`
	Comment    *string `json:"comment,omitempty"`
	Rating     *int    `json:"rating,omitempty"`
	ReviewerID *string `json:"reviewerID,omitempty"`
	ID         *string `json:"id,omitempty"`
	CreatedAt  *string `json:"createdAt,omitempty"`
	UpdatedAt  *string `json:"updatedAt,omitempty"`
	Reviewer   *string `json:"reviewer,omitempty"`
}

type MovieReviewNotification struct {
	ID              string       `json:"id"`
	Title           *string      `json:"title,omitempty"`
	Description     *string      `json:"description,omitempty"`
	DirectorID      *string      `json:"directorID,omitempty"`
	CreatedAt       *string      `json:"createdAt,omitempty"`
	UpdatedAt       *string      `json:"updatedAt,omitempty"`
	UpdatedByUserID *string      `json:"updatedByUserID,omitempty"`
	Review          *MovieReview `json:"review,omitempty"`
	AverageRating   *float64     `json:"averageRating,omitempty"`
	Director        *string      `json:"director,omitempty"`
	UpdatedBy       *string      `json:"updatedBy,omitempty"`
}

type MovieReviewSearchFilter struct {
	Comment  *string `json:"comment,omitempty"`
	Reviewer *string `json:"reviewer,omitempty"`
}

type MovieSearchFilter struct {
	Title    *string `json:"title,omitempty"`
	Director *string `json:"director,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type Subscription struct {
}

type Token struct {
	AccessToken string `json:"AccessToken"`
}

type UserDetails struct {
	Email     string `json:"email"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

type MovieReviewSearchSort string

const (
	MovieReviewSearchSortNewest     MovieReviewSearchSort = "NEWEST"
	MovieReviewSearchSortOldest     MovieReviewSearchSort = "OLDEST"
	MovieReviewSearchSortRatingAsc  MovieReviewSearchSort = "RATING_ASC"
	MovieReviewSearchSortRatingDesc MovieReviewSearchSort = "RATING_DESC"
)

var AllMovieReviewSearchSort = []MovieReviewSearchSort{
	MovieReviewSearchSortNewest,
	MovieReviewSearchSortOldest,
	MovieReviewSearchSortRatingAsc,
	MovieReviewSearchSortRatingDesc,
}

func (e MovieReviewSearchSort) IsValid() bool {
	switch e {
	case MovieReviewSearchSortNewest, MovieReviewSearchSortOldest, MovieReviewSearchSortRatingAsc, MovieReviewSearchSortRatingDesc:
		return true
	}
	return false
}

func (e MovieReviewSearchSort) String() string {
	return string(e)
}

func (e *MovieReviewSearchSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MovieReviewSearchSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MovieReviewSearchSort", str)
	}
	return nil
}

func (e MovieReviewSearchSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MovieSearchSort string

const (
	MovieSearchSortNewest            MovieSearchSort = "NEWEST"
	MovieSearchSortOldest            MovieSearchSort = "OLDEST"
	MovieSearchSortTitleAsc          MovieSearchSort = "TITLE_ASC"
	MovieSearchSortTitleDesc         MovieSearchSort = "TITLE_DESC"
	MovieSearchSortAverageRatingAsc  MovieSearchSort = "AVERAGE_RATING_ASC"
	MovieSearchSortAverageRatingDesc MovieSearchSort = "AVERAGE_RATING_DESC"
)

var AllMovieSearchSort = []MovieSearchSort{
	MovieSearchSortNewest,
	MovieSearchSortOldest,
	MovieSearchSortTitleAsc,
	MovieSearchSortTitleDesc,
	MovieSearchSortAverageRatingAsc,
	MovieSearchSortAverageRatingDesc,
}

func (e MovieSearchSort) IsValid() bool {
	switch e {
	case MovieSearchSortNewest, MovieSearchSortOldest, MovieSearchSortTitleAsc, MovieSearchSortTitleDesc, MovieSearchSortAverageRatingAsc, MovieSearchSortAverageRatingDesc:
		return true
	}
	return false
}

func (e MovieSearchSort) String() string {
	return string(e)
}

func (e *MovieSearchSort) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MovieSearchSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MovieSearchSort", str)
	}
	return nil
}

func (e MovieSearchSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
